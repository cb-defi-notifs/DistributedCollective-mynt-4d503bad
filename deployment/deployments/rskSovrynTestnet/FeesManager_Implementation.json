{
  "address": "0xA17B99B2817d0EdD992fE00D219DEc2b9835742d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositBridgeFee",
          "type": "uint256"
        }
      ],
      "name": "DepositBridgeFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositFee",
          "type": "uint256"
        }
      ],
      "name": "DepositFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalBridgeFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalBridgeFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFeeChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositBridgeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalBridgeFee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setDepositBridgeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalBridgeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc561800feb116b7576a9db87c900e050282e5b645d9cac5ed64f262435bc9adc",
  "receipt": {
    "to": null,
    "from": "0xCF311E7375083b9513566a47B9f3e93F1FcdCfBF",
    "contractAddress": "0xA17B99B2817d0EdD992fE00D219DEc2b9835742d",
    "transactionIndex": 0,
    "gasUsed": "612627",
    "logsBloom": "0x
    "blockHash": "0x81fc2d1740a9368ef4036f5091cc304ec25273e37ee62e9b4e8933eef458c8a1",
    "transactionHash": "0xc561800feb116b7576a9db87c900e050282e5b645d9cac5ed64f262435bc9adc",
    "logs": [],
    "blockNumber": 3440422,
    "cumulativeGasUsed": "612627",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fb7c766d504e9a507c1682a56f98c8c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositBridgeFee\",\"type\":\"uint256\"}],\"name\":\"DepositBridgeFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalBridgeFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalBridgeFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFeeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositBridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalBridgeFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDepositBridgeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalBridgeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract is responsible for fees calculations.\",\"events\":{\"DepositBridgeFeeChanged(uint256)\":{\"details\":\"Emitted when deposit bridge fee has changed.\",\"params\":{\"depositBridgeFee\":\"Amount of the fee.\"}},\"DepositFeeChanged(uint256)\":{\"details\":\"Emitted when deposit fee has changed.\",\"params\":{\"depositFee\":\"Amount of the fee.\"}},\"WithdrawalBridgeFeeChanged(uint256)\":{\"details\":\"Emitted when withdrawal bridge fee has changed.\",\"params\":{\"withdrawalBridgeFee\":\"Amount of the fee.\"}},\"WithdrawalFeeChanged(uint256)\":{\"details\":\"Emitted when withdrawal fee has changed.\",\"params\":{\"withdrawalFee\":\"Amount of the fee.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateDepositBridgeFee(uint256)\":{\"details\":\"Calculate and return fee for deposit through bridge.\",\"params\":{\"_massetAmount\":\"Amount of masset to deposit.\"},\"returns\":{\"_0\":\"fee           Calculated fee amount.\"}},\"calculateDepositFee(uint256)\":{\"details\":\"Calculate and return deposit fee amount based on massetAmount.\",\"params\":{\"_massetAmount\":\"Amount of masset to deposit.\"},\"returns\":{\"_0\":\"fee           Calculated fee amount.\"}},\"calculateRedeemBridgeFee(uint256)\":{\"details\":\"Calculate and return fee for redeem through bridge.\",\"params\":{\"_massetAmount\":\"Amount of masset.\"},\"returns\":{\"_0\":\"fee           Calculated fee amount.\"}},\"calculateRedeemFee(uint256)\":{\"details\":\"Calculate and return redeem fee amount based on massetAmount.\",\"params\":{\"_massetAmount\":\"Amount of masset.\"},\"returns\":{\"_0\":\"fee           Calculated fee amount.\"}},\"initialize(uint256,uint256,uint256,uint256)\":{\"details\":\"Contract initializer.\",\"params\":{\"_depositBridgeFee\":\"Amount of deposit through bridge fee in promils.\",\"_depositFee\":\"Amount of deposit fee in promils.\",\"_withdrawalBridgeFee\":\"Amount of redeem through bridge fee in promils.\",\"_withdrawalFee\":\"Amount of redeem fee in promils.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"PRECISION\":{\"details\":\"Factor of fees.\"}},\"title\":\"FeesManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PRECISION()\":{\"notice\":\"a value of 10000 means that 223 equals 2.23% and 10000 equals 100%\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/masset/FeesManager.sol\":\"FeesManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/masset/FeesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title FeesManager\\n * @dev Contract is responsible for fees calculations.\\n */\\ncontract FeesManager is OwnableUpgradeable {\\n    using SafeMath for uint256;\\n\\n    // State\\n\\n    /**\\n     * @dev Factor of fees.\\n     * @notice a value of 10000 means that 223 equals 2.23% and 10000 equals 100%\\n     */\\n    uint256 public constant PRECISION = 10000;\\n\\n    uint256 private depositFee;\\n    uint256 private depositBridgeFee;\\n    uint256 private withdrawalFee;\\n    uint256 private withdrawalBridgeFee;\\n\\n    // Events\\n\\n    /**\\n     * @dev Emitted when deposit fee has changed.\\n     * @param depositFee            Amount of the fee.\\n     */\\n    event DepositFeeChanged(uint256 depositFee);\\n\\n    /**\\n     * @dev Emitted when deposit bridge fee has changed.\\n     * @param depositBridgeFee      Amount of the fee.\\n     */\\n    event DepositBridgeFeeChanged(uint256 depositBridgeFee);\\n\\n    /**\\n     * @dev Emitted when withdrawal fee has changed.\\n     * @param withdrawalFee         Amount of the fee.\\n     */\\n    event WithdrawalFeeChanged(uint256 withdrawalFee);\\n\\n    /**\\n     * @dev Emitted when withdrawal bridge fee has changed.\\n     * @param withdrawalBridgeFee   Amount of the fee.\\n     */\\n    event WithdrawalBridgeFeeChanged(uint256 withdrawalBridgeFee);\\n\\n    // Initializer\\n\\n    /**\\n     * @dev Contract initializer.\\n     * @param _depositFee           Amount of deposit fee in promils.\\n     * @param _depositBridgeFee     Amount of deposit through bridge fee in promils.\\n     * @param _withdrawalFee        Amount of redeem fee in promils.\\n     * @param _withdrawalBridgeFee  Amount of redeem through bridge fee in promils.\\n     */\\n    function initialize(\\n        uint256 _depositFee,\\n        uint256 _depositBridgeFee,\\n        uint256 _withdrawalFee,\\n        uint256 _withdrawalBridgeFee\\n    ) external initializer {\\n        __Ownable_init_unchained();\\n        setDepositFee(_depositFee);\\n        setDepositBridgeFee(_depositBridgeFee);\\n        setWithdrawalFee(_withdrawalFee);\\n        setWithdrawalBridgeFee(_withdrawalBridgeFee);\\n    }\\n\\n    // Internal\\n\\n    /**\\n     * @dev Calculate and return fee amount based on massetAmount and type of fee.\\n     */\\n    function _calculateFee(uint256 _massetAmount, uint256 _fee) internal pure returns (uint256) {\\n        return _massetAmount.mul(_fee).div(PRECISION);\\n    }\\n\\n    // Public\\n\\n    /**\\n     * @dev Calculate and return deposit fee amount based on massetAmount.\\n     * @param _massetAmount  Amount of masset to deposit.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateDepositFee(uint256 _massetAmount) external view returns (uint256) {\\n        return _calculateFee(_massetAmount, depositFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return fee for deposit through bridge.\\n     * @param _massetAmount  Amount of masset to deposit.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateDepositBridgeFee(uint256 _massetAmount) external view returns (uint256) {\\n        return _calculateFee(_massetAmount, depositBridgeFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return redeem fee amount based on massetAmount.\\n     * @param _massetAmount  Amount of masset.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateRedeemFee(uint256 _massetAmount) external view returns (uint256) {\\n        return _calculateFee(_massetAmount, withdrawalFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return fee for redeem through bridge.\\n     * @param _massetAmount  Amount of masset.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateRedeemBridgeFee(uint256 _massetAmount) external view returns (uint256) {\\n        return _calculateFee(_massetAmount, withdrawalBridgeFee);\\n    }\\n\\n    // Getters\\n\\n    function getDepositFee() external view returns (uint256) {\\n        return depositFee;\\n    }\\n\\n    function getDepositBridgeFee() external view returns (uint256) {\\n        return depositBridgeFee;\\n    }\\n\\n    function getWithdrawalFee() external view returns (uint256) {\\n        return withdrawalFee;\\n    }\\n\\n    function getWithdrawalBridgeFee() external view returns (uint256) {\\n        return withdrawalBridgeFee;\\n    }\\n\\n    // Governance methods\\n\\n    function setDepositFee(uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        depositFee = _amount;\\n        emit DepositFeeChanged(_amount);\\n    }\\n\\n    function setDepositBridgeFee(uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        depositBridgeFee = _amount;\\n        emit DepositBridgeFeeChanged(_amount);\\n    }\\n\\n    function setWithdrawalFee(uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        withdrawalFee = _amount;\\n        emit WithdrawalFeeChanged(_amount);\\n    }\\n\\n    function setWithdrawalBridgeFee(uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        withdrawalBridgeFee = _amount;\\n        emit WithdrawalBridgeFeeChanged(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x874d0f2802c5f0f521ce09a5ddc0a7c23b31e335a3432d52ae5b75f63514427a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061082b806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80637f0c6010116100a2578063c54edda011610071578063c54edda0146101ed578063c8066c41146101f5578063d8e159f8146101fd578063ee87674314610205578063f2fde38b1461021857600080fd5b80637f0c6010146101a35780638da5cb5b146101b6578063aaf5eb68146101d1578063ac1e5025146101da57600080fd5b806350bc5042116100de57806350bc50421461016257806360a2da441461017557806364c4fbba14610188578063715018a61461019b57600080fd5b80630de705b514610110578063247d284b146101275780633ee7ab841461013a578063490ae2101461014d575b600080fd5b6065545b6040519081526020015b60405180910390f35b61011461013536600461070e565b61022b565b61011461014836600461070e565b61023f565b61016061015b36600461070e565b61024d565b005b61016061017036600461070e565b6102bc565b610160610183366004610727565b61031b565b61011461019636600461070e565b610454565b610160610462565b6101146101b136600461070e565b610476565b6033546040516001600160a01b03909116815260200161011e565b61011461271081565b6101606101e836600461070e565b610484565b606854610114565b606654610114565b606754610114565b61016061021336600461070e565b6104e3565b610160610226366004610759565b610542565b6000610239826065546105bb565b92915050565b6000610239826068546105bb565b6102556105da565b6127108111156102805760405162461bcd60e51b815260040161027790610782565b60405180910390fd5b60658190556040518181527f2a6f1084651542f3142c70f4c43c096d016a8b517c063660b146268f646ea43a906020015b60405180910390a150565b6102c46105da565b6127108111156102e65760405162461bcd60e51b815260040161027790610782565b60668190556040518181527f670d967e6a887c84c79a646c76703d9237c70d6f94df6e50ab680b527c264d17906020016102b1565b600054610100900460ff161580801561033b5750600054600160ff909116105b806103555750303b158015610355575060005460ff166001145b6103b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610277565b6000805460ff1916600117905580156103db576000805461ff0019166101001790555b6103e3610634565b6103ec8561024d565b6103f5846102bc565b6103fe83610484565b610407826104e3565b801561044d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000610239826066546105bb565b61046a6105da565b61047460006106a4565b565b6000610239826067546105bb565b61048c6105da565b6127108111156104ae5760405162461bcd60e51b815260040161027790610782565b60678190556040518181527ffc1353e6b18ce07b5a979c8edf77a87455939a17a9eebbb084dcde5bfb3b19ac906020016102b1565b6104eb6105da565b61271081111561050d5760405162461bcd60e51b815260040161027790610782565b60688190556040518181527f6885e5ccab44b224d100539b69688eb383fb3ccf89de3819cc5d128063e389c9906020016102b1565b61054a6105da565b6001600160a01b0381166105af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610277565b6105b8816106a4565b50565b60006105d36127106105cd85856106f6565b90610702565b9392505050565b6033546001600160a01b031633146104745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610277565b600054610100900460ff1661069f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610277565b610474335b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006105d382846107ae565b60006105d382846107d3565b60006020828403121561072057600080fd5b5035919050565b6000806000806080858703121561073d57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561076b57600080fd5b81356001600160a01b03811681146105d357600080fd5b6020808252601290820152711a5b9d985b1a590819995948185b5bdd5b9d60721b604082015260600190565b808202811582820484141761023957634e487b7160e01b600052601160045260246000fd5b6000826107f057634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a59339f4e13f92c09060802ebbb56b81ee341c260a9c1e3c76a5c2cecfd070ee64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80637f0c6010116100a2578063c54edda011610071578063c54edda0146101ed578063c8066c41146101f5578063d8e159f8146101fd578063ee87674314610205578063f2fde38b1461021857600080fd5b80637f0c6010146101a35780638da5cb5b146101b6578063aaf5eb68146101d1578063ac1e5025146101da57600080fd5b806350bc5042116100de57806350bc50421461016257806360a2da441461017557806364c4fbba14610188578063715018a61461019b57600080fd5b80630de705b514610110578063247d284b146101275780633ee7ab841461013a578063490ae2101461014d575b600080fd5b6065545b6040519081526020015b60405180910390f35b61011461013536600461070e565b61022b565b61011461014836600461070e565b61023f565b61016061015b36600461070e565b61024d565b005b61016061017036600461070e565b6102bc565b610160610183366004610727565b61031b565b61011461019636600461070e565b610454565b610160610462565b6101146101b136600461070e565b610476565b6033546040516001600160a01b03909116815260200161011e565b61011461271081565b6101606101e836600461070e565b610484565b606854610114565b606654610114565b606754610114565b61016061021336600461070e565b6104e3565b610160610226366004610759565b610542565b6000610239826065546105bb565b92915050565b6000610239826068546105bb565b6102556105da565b6127108111156102805760405162461bcd60e51b815260040161027790610782565b60405180910390fd5b60658190556040518181527f2a6f1084651542f3142c70f4c43c096d016a8b517c063660b146268f646ea43a906020015b60405180910390a150565b6102c46105da565b6127108111156102e65760405162461bcd60e51b815260040161027790610782565b60668190556040518181527f670d967e6a887c84c79a646c76703d9237c70d6f94df6e50ab680b527c264d17906020016102b1565b600054610100900460ff161580801561033b5750600054600160ff909116105b806103555750303b158015610355575060005460ff166001145b6103b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610277565b6000805460ff1916600117905580156103db576000805461ff0019166101001790555b6103e3610634565b6103ec8561024d565b6103f5846102bc565b6103fe83610484565b610407826104e3565b801561044d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000610239826066546105bb565b61046a6105da565b61047460006106a4565b565b6000610239826067546105bb565b61048c6105da565b6127108111156104ae5760405162461bcd60e51b815260040161027790610782565b60678190556040518181527ffc1353e6b18ce07b5a979c8edf77a87455939a17a9eebbb084dcde5bfb3b19ac906020016102b1565b6104eb6105da565b61271081111561050d5760405162461bcd60e51b815260040161027790610782565b60688190556040518181527f6885e5ccab44b224d100539b69688eb383fb3ccf89de3819cc5d128063e389c9906020016102b1565b61054a6105da565b6001600160a01b0381166105af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610277565b6105b8816106a4565b50565b60006105d36127106105cd85856106f6565b90610702565b9392505050565b6033546001600160a01b031633146104745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610277565b600054610100900460ff1661069f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610277565b610474335b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006105d382846107ae565b60006105d382846107d3565b60006020828403121561072057600080fd5b5035919050565b6000806000806080858703121561073d57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561076b57600080fd5b81356001600160a01b03811681146105d357600080fd5b6020808252601290820152711a5b9d985b1a590819995948185b5bdd5b9d60721b604082015260600190565b808202811582820484141761023957634e487b7160e01b600052601160045260246000fd5b6000826107f057634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a59339f4e13f92c09060802ebbb56b81ee341c260a9c1e3c76a5c2cecfd070ee64736f6c63430008110033",
  "devdoc": {
    "details": "Contract is responsible for fees calculations.",
    "events": {
      "DepositBridgeFeeChanged(uint256)": {
        "details": "Emitted when deposit bridge fee has changed.",
        "params": {
          "depositBridgeFee": "Amount of the fee."
        }
      },
      "DepositFeeChanged(uint256)": {
        "details": "Emitted when deposit fee has changed.",
        "params": {
          "depositFee": "Amount of the fee."
        }
      },
      "WithdrawalBridgeFeeChanged(uint256)": {
        "details": "Emitted when withdrawal bridge fee has changed.",
        "params": {
          "withdrawalBridgeFee": "Amount of the fee."
        }
      },
      "WithdrawalFeeChanged(uint256)": {
        "details": "Emitted when withdrawal fee has changed.",
        "params": {
          "withdrawalFee": "Amount of the fee."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateDepositBridgeFee(uint256)": {
        "details": "Calculate and return fee for deposit through bridge.",
        "params": {
          "_massetAmount": "Amount of masset to deposit."
        },
        "returns": {
          "_0": "fee           Calculated fee amount."
        }
      },
      "calculateDepositFee(uint256)": {
        "details": "Calculate and return deposit fee amount based on massetAmount.",
        "params": {
          "_massetAmount": "Amount of masset to deposit."
        },
        "returns": {
          "_0": "fee           Calculated fee amount."
        }
      },
      "calculateRedeemBridgeFee(uint256)": {
        "details": "Calculate and return fee for redeem through bridge.",
        "params": {
          "_massetAmount": "Amount of masset."
        },
        "returns": {
          "_0": "fee           Calculated fee amount."
        }
      },
      "calculateRedeemFee(uint256)": {
        "details": "Calculate and return redeem fee amount based on massetAmount.",
        "params": {
          "_massetAmount": "Amount of masset."
        },
        "returns": {
          "_0": "fee           Calculated fee amount."
        }
      },
      "initialize(uint256,uint256,uint256,uint256)": {
        "details": "Contract initializer.",
        "params": {
          "_depositBridgeFee": "Amount of deposit through bridge fee in promils.",
          "_depositFee": "Amount of deposit fee in promils.",
          "_withdrawalBridgeFee": "Amount of redeem through bridge fee in promils.",
          "_withdrawalFee": "Amount of redeem fee in promils."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "PRECISION": {
        "details": "Factor of fees."
      }
    },
    "title": "FeesManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PRECISION()": {
        "notice": "a value of 10000 means that 223 equals 2.23% and 10000 equals 100%"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 527,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 530,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1087,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7378,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "depositFee",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 7380,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "depositBridgeFee",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 7382,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 7384,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "withdrawalBridgeFee",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}